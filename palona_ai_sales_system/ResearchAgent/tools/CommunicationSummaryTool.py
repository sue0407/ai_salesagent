from agency_swarm.tools import BaseTool
from pydantic import Field
import os
import json
from typing import Optional
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

class CommunicationSummaryTool(BaseTool):
    """
    Combines 'notes' and 'message_log' fields from crm_data.json for a given lead, plus an optional uploaded communication document, and optionally a sales prep report, and generates a <300-word, natural language summary for sales preparation. Output is plain text, not JSON.
    """
    lead_id: str = Field(
        ..., description="Lead record_id to summarize communications for"
    )
    uploaded_document: Optional[str] = Field(
        default=None,
        description="Text content of the user-uploaded communication document, if any"
    )
    report_text: Optional[str] = Field(
        default=None,
        description="Text content of the sales prep report generated by ReportGenerationTool, if any"
    )

    def _get_crm_communications(self) -> str:
        data_file = Path(__file__).parent.parent.parent / 'data' / 'crm_data.json'
        try:
            with open(data_file, 'r') as f:
                crm_data = json.load(f)
            lead = next((l for l in crm_data["crm_leads"] if l["record_id"] == self.lead_id), None)
            if not lead:
                return ""
            notes = lead.get("notes", "")
            message_log = lead.get("message_log", [])
            messages = "\n".join([m["message"] if isinstance(m, dict) and "message" in m else str(m) for m in message_log])
            combined = f"Notes: {notes}\nMessages: {messages}"
            return combined.strip()
        except Exception:
            return ""

    def _llm_generate_summary(self, communications: str, uploaded_document: Optional[str], report_text: Optional[str]) -> str:
        import openai
        import anthropic
        import os
        prompt = f"""
You are a sales enablement strategist. Your task is to review the provided communication history, uploaded document (if available), and sales prep report (if available), and generate a concise, insightful briefing for a sales representative.

Your summary must be written in natural language prose (no lists, bullet points, tags, or JSON), limited to 300 words maximum. It should be suitable for inclusion in a CRM or internal briefing note, and maintain a consistent, professional tone throughout—avoid any conversational phrases, greetings, or motivational language.

The goal is to clearly and efficiently prepare the sales rep for an upcoming call or meeting. Focus on the following key areas:

Key Stakeholders – Who is involved from the prospect's side? What are their roles, responsibilities, and apparent interests?

Business Context – What's the current state of the prospect's business? Include any relevant initiatives, changes, or strategic goals.

Pain Points and Goals – What challenges, needs, or objectives have been mentioned or implied?

Buying Signals or Barriers – What indicators of intent, urgency, hesitations, or blockers are present?

Recommended Focus – Based on the above, what should the sales rep prioritize or be aware of in the upcoming interaction?

# Communication History
{communications}

# Uploaded Document
{uploaded_document or ''}

# Sales Prep Report
{report_text or ''}

Notes for Output
Maintain a neutral and analytical tone—this is a strategic summary, not a message to the rep.

Do not include personal touches like "Hi," "Hope this helps," or "You've got this."

Write clearly, insightfully, and professionally.
"""
        claude_key = os.getenv("CLAUDE_API_KEY")
        if claude_key:
            client = anthropic.Anthropic(api_key=claude_key)
            response = client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=600,
                temperature=0.2,
                system="You are a helpful sales research assistant.",
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text.strip()
        openai_key = os.getenv("OPENAI_API_KEY")
        if openai_key:
            client = openai.OpenAI(api_key=openai_key)
            try:
                completion = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "system", "content": "You are a helpful sales research assistant."},
                              {"role": "user", "content": prompt}],
                    max_tokens=600,
                    temperature=0.2
                )
                return completion.choices[0].message.content.strip()
            except openai.OpenAIError as e:
                if hasattr(e, 'status_code') and e.status_code == 404:
                    # Try gpt-3.5-turbo as fallback
                    completion = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[{"role": "system", "content": "You are a helpful sales research assistant."},
                                  {"role": "user", "content": prompt}],
                        max_tokens=600,
                        temperature=0.2
                    )
                    return completion.choices[0].message.content.strip()
                else:
                    raise
        # Fallback: concatenate text
        return f"COMMUNICATIONS: {communications}\nUPLOADED: {uploaded_document or ''}\nREPORT: {report_text or ''}"

    def run(self):
        """
        Combines CRM notes, message log, optional uploaded document, and optional sales prep report, then generates a <300-word natural language summary using an LLM. Returns plain text only. Also saves the output to data/outputs/comm_{lead_id}.txt.
        """
        try:
            communications = self._get_crm_communications()
            summary = self._llm_generate_summary(communications, self.uploaded_document, self.report_text)
            # Save output
            outputs_dir = Path(__file__).parent.parent.parent / 'data' / 'outputs'
            outputs_dir.mkdir(parents=True, exist_ok=True)
            with open(outputs_dir / f'comm_{self.lead_id}.txt', 'w') as f:
                f.write(summary)
            return summary
        except Exception as e:
            return f"Error generating communication summary: {str(e)}" 