from agency_swarm.tools import BaseTool
from pydantic import Field
import os
from dotenv import load_dotenv
from pathlib import Path

load_dotenv()

class ReportGenerationTool(BaseTool):
    """
    Uses Claude or OpenAI GPT to generate a concise, actionable sales call/meeting prep guide (<500 words) for a sales rep.
    Reads input summaries from text files generated by CompanyResearchTool and LinkedInResearchTool.
    Output is saved as a plain text file in the data/outputs directory.
    """
    company_name: str = Field(
        ..., description="Name of the company to generate report for"
    )
    prospect_name: str = Field(
        ..., description="Full name of the prospect to generate report for"
    )

    def _read_input_file(self, filename: str) -> str:
        """Read content from a file in the data/outputs directory"""
        try:
            file_path = Path(__file__).parent.parent.parent / 'data' / 'outputs' / filename
            with open(file_path, 'r') as f:
                return f.read().strip()
        except Exception as e:
            return f"Error reading {filename}: {str(e)}"

    def _get_claude_api_key(self):
        return os.getenv("CLAUDE_API_KEY")

    def _get_openai_api_key(self):
        return os.getenv("OPENAI_API_KEY")

    def _build_prompt(self, company_summary: str, prospect_summary: str) -> str:
        prompt = f"""
# Role
You are an elite sales strategist and business intelligence expert with extensive experience in tech/AI industry sales. Your deep understanding of sales psychology and proven track record of analyzing prospect data to create winning sales strategies makes you invaluable for pre-call preparation.

# Task
Analyze the provided company research summary and prospect summary data to create a strategic sales call/meeting preparation guide for a sales rep at Palona AI.

Palona AI is a Palo Alto-based startup founded in 2024 by former leaders from Google, Meta, and Samsung. The company specializes in developing emotionally intelligent, brand-aligned AI agents designed to enhance customer interactions for direct-to-consumer (D2C) businesses. These AI agents are capable of engaging in personalized, persuasive conversations that drive revenue and customer satisfaction at scale.

Palona AI's mission is to provide businesses with AI solutions that can be entrusted with the most critical aspects of their operations: their brand, customer relationships, and sales. By pioneering generative AI technology, Palona aims to replace impersonal shopping experiences with individualized interactions that build lasting customer relationships.

Palona AI offers a suite of AI solutions that combine multi-agent systems, multimodal models, and proprietary emotional intelligence language models. These technologies enable AI agents to learn about individual customers, adapt to their needs, and take precise actions on their behalf. The AI agents can be customized to reflect a brand's unique voice and personality, ensuring consistent customer experiences across various channels.

Core Values:
Emotional Intelligence: Palona's AI agents are designed to understand and respond to customer emotions, enabling more natural and empathetic interactions.
Brand Representation: The AI agents maintain brand identity across all customer touchpoints, ensuring consistent and on-brand communication.
Customer Retention: By providing 24/7 VIP experiences, Palona helps convert one-time buyers into lifelong fans, increasing customer lifetime value.
Operational Efficiency: Palona's solutions aim to reduce reliance on third-party services, helping businesses reclaim margins and streamline operations.

To write this report use the following process:
1. Review and synthesize the company research summary to identify key business challenges and opportunities
2. Analyze the prospect's LinkedIn summary to understand their background, role, and potential pain points (potentially find talking points)
3. Map Palona AI's unique value proposition to the prospect and company's specific situation
4. Generate strategic talking points and recommendations for the sales rep
5. Outline potential objections and effective counter-responses

# Specifics
- Your thorough analysis is crucial for our sales team's success, please provide detailed and actionable insights
- Focus on highlighting how our expertise provide personalized AI solutions to customers specifically addresses their needs
- We deeply value your strategic guidance in helping position our services effectively
- Include specific conversation starters based on the prospect's background
- Identify trigger points that would make our services particularly valuable to their situation

# Notes
- Always maintain a consultative approach rather than pure sales pitch
- Ensure the report not too long (<= 500 words). Be concise and easy to read
- Ensure all recommendations align with prospect's specific industry and growth stage

# Data
---
COMPANY RESEARCH SUMMARY:
{company_summary}

---
PROSPECT SUMMARY:
{prospect_summary}

---
Please generate a detailed, actionable, and consultative sales call/meeting preparation guide for the Palona AI sales rep, following the process and specifics above. Do not include any HTML or formatting tags, just plain text. Limit your response to 500 words or less.
"""
        return prompt

    def _call_claude(self, prompt: str) -> str:
        import requests
        api_key = self._get_claude_api_key()
        if not api_key:
            raise ValueError("CLAUDE_API_KEY not found in environment variables.")
        headers = {
            "x-api-key": api_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        data = {
            "model": "claude-3-opus-20240229",
            "max_tokens": 2000,
            "temperature": 0.6,
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }
        response = requests.post("https://api.anthropic.com/v1/messages", headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result["content"][0]["text"].strip()

    def _call_openai(self, prompt: str) -> str:
        import requests
        api_key = self._get_openai_api_key()
        if not api_key:
            raise ValueError("OPENAI_API_KEY not found in environment variables.")
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "gpt-4",
            "messages": [
                {"role": "system", "content": "You are a helpful sales assistant."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 2000,
            "temperature": 0.6
        }
        response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result["choices"][0]["message"]["content"].strip()

    def run(self):
        """
        Generates a concise, actionable sales call/meeting prep guide using Claude or OpenAI GPT.
        Reads input from text files generated by CompanyResearchTool and LinkedInResearchTool.
        Saves output as a text file in the data/outputs directory.
        """
        try:
            # Read input files
            safe_company = self.company_name.replace(' ', '_').lower()
            safe_name = self.prospect_name.replace(' ', '_').lower()
            
            company_summary = self._read_input_file(f'company_{safe_company}.txt')
            prospect_summary = self._read_input_file(f'linkedin_{safe_name}.txt')
            
            # Generate report
            prompt = self._build_prompt(company_summary, prospect_summary)
            if self._get_claude_api_key():
                summary = self._call_claude(prompt)
            else:
                summary = self._call_openai(prompt)
            
            # Save output
            outputs_dir = Path(__file__).parent.parent.parent / 'data' / 'outputs'
            outputs_dir.mkdir(parents=True, exist_ok=True)
            output_file = outputs_dir / f'report_{safe_company}_{safe_name}.txt'
            with open(output_file, 'w') as f:
                f.write(summary)
            
            return summary
        except Exception as e:
            return f"Error generating report: {str(e)}" 